generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

model Category {
  id          Int    @id @default(autoincrement())
  slug        String @unique @db.VarChar(100)
  name        String @db.VarChar(100)
  description String

  products Product[]

  createdById Int?  @map("created_by")
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Image {
  id  Int    @id @default(autoincrement())
  url String @db.Text

  variantId Int     @map("variant_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdById Int?  @map("created_by")
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("images")
}

model Variant {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(100)
  price      Decimal @db.Decimal(10, 2)
  attributes Json

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  cartItems CartItem[]

  orders Order[]

  images Image[]

  createdById Int?  @map("created_by")
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("variants")
}

model Product {
  id          Int       @id @default(autoincrement())
  slug        String
  name        String    @db.VarChar(100)
  description String
  variants    Variant[]
  tags        Tag[]

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdById Int?  @map("created_by")
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  products Product[]

  createdById Int?  @map("created_by")
  createdBy   User? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String  @db.VarChar(100)
  lastName  String  @db.VarChar(100)
  email     String  @unique @db.VarChar(254)
  password  String  @db.VarChar(200)
  admin     Boolean @default(false) @db.Boolean()

  // only admin users will have these fields
  categories Category[]
  images     Image[]
  products   Product[]
  variants   Variant[]
  tags       Tag[]

  cartItems CartItem[]
  orders    Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int @db.Integer

  variantId Int     @map("variant_id")
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([variantId, userId])
  @@map("cart_items")
}

model Order {
  id       Int @id @default(autoincrement())
  total    Int @db.Integer
  shipping Int @db.Integer

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  variants Variant[]

  @@map("orders")
}
